---
description: 
globs: 
alwaysApply: false
---
# コーディングガイドライン

## ゲーム開発の基本方針

1. ユーザー体験を最優先
   - 直感的な操作性
   - 分かりやすいフィードバック
   - 適切な難易度設定

2. コードの品質
   - 関数は1つの責務のみを持つ
   - 変数名は目的を明確に表現
   - コメントは日本語で分かりやすく

3. パフォーマンス
   - 画像は最適化して使用
   - アニメーションは軽量に
   - 不要なDOM操作を避ける

## ゲーム実装のルール

### HTML
- セマンティックな要素を使用
- アクセシビリティを考慮した構造
- 適切な見出しレベルを使用

### CSS
- モバイルファーストの設計
- 変数を使用して色やサイズを管理
- アニメーションはGPUを活用

### JavaScript
- イベントリスナーは適切に解除
- 非同期処理は適切に処理
- エラーハンドリングを実装

## ゲームの追加手順

1. 新規ゲームの追加
   - `games/`ディレクトリに新しいフォルダを作成
   - 必要なファイルを作成（index.html, style.css, script.js）
   - メインのindex.htmlにゲームを登録

2. 既存ゲームの更新
   - 変更内容を明確に記録
   - 既存の機能を壊さないよう注意
   - テストを十分に行う

## レビューの基準

1. コードレビュー
   - 可読性
   - 保守性
   - パフォーマンス
   - セキュリティ

2. ゲームレビュー
   - 操作性
   - 難易度
   - フィードバック
   - エラー処理

## 命名規則

### ファイル名
- HTML: `kebab-case.html`
- CSS: `kebab-case.css`
- JavaScript: `camelCase.js`

### 変数・関数名
- 変数: `camelCase`
- 関数: `camelCase`
- 定数: `UPPER_SNAKE_CASE`
- クラス: `PascalCase`

## コメントの書き方

```javascript
/**
 * 関数の説明
 * @param {string} param1 - パラメータ1の説明
 * @param {number} param2 - パラメータ2の説明
 * @returns {boolean} 戻り値の説明
 */
function exampleFunction(param1, param2) {
  // 処理の説明
  return true;
}
```

